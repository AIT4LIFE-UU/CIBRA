% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CIBRA_method.R
\name{run_CIBRA}
\alias{run_CIBRA}
\title{Computationally identify biologically relevant alterations}
\usage{
run_CIBRA(
  data,
  definition_matrix,
  columns,
  control_definition,
  confidence = 0.1,
  iterations = 0,
  covariates = c(),
  method = "DESeq2",
  parallel = FALSE,
  speedup = FALSE,
  min_n = 10,
  outputDir = FALSE,
  sample_column = NULL
)
}
\arguments{
\item{data}{RNA count dataframe with genes as rows and samples as columns}

\item{definition_matrix}{design dataframe of the comparisons to make, binary
columns (factors) with an indication of the groups to test and samples as rownames.}

\item{columns}{columns from the definition_matrix to assess with respect to
the control definition}

\item{control_definition}{Definition term that will be used as reference for
the comparison (e.g. WT)}

\item{confidence}{alpha threshold to calculate the proportion (default is 0.1)}

\item{iterations}{number of iterations for random permutation (recommendation is 50 iterations per definition)}

\item{covariates}{list of column names from the definition matrix to use as covariates (supported only with DESeq2)}

\item{method}{method to use for differential expression analysis.
options: 'DESeq2', 'edgeR' and 'limma'.
Defaults to 'DESeq2'}

\item{parallel}{boolean state to operate in parallel mode. Defaults to
\code{FALSE}}

\item{speedup}{boolean state to run DESeq2 in speedup mode. Defaults to
\code{FALSE}}

\item{min_n}{minimal number of samples to consider for analysis. Defaults to
the recommended minimum number of samples: \code{10}}

\item{outputDir}{path for result files, if \code{FALSE}, no results will be
written. Defaults to \code{FALSE}}

\item{sample_column}{name of the column containing the sample names, if NULL, rownames will be used}
}
\value{
returns a list containing a dataframe with the signal measures and
associated metadata and associated results generated by differential
expression analysis
}
\description{
\code{run_CIBRA} calculates an impact score from provided expression data and
defined definitions
}
\examples{

require(dplyr)

# load transcription data and genomic alterations
count_data <- CIBRA::TCGA_CRC_rna_data
mutation_profile <- CIBRA::TCGA_CRC_non_silent_mutation_profile

# select BRAF as example
goi <- c("BRAF", "APC", "TP53")

# filter mutation profile for only selected genes
definition_matrix <- mutation_profile[goi]

# select only 30 samples for the cases (BRAF mutant) and controls (BRAF WT) for the sake of speed of the example
# you can remove this limit if you want to run the full comparison

definition_matrix <- definition_matrix \%>\% tibble::rownames_to_column('sample') \%>\% group_by(BRAF) \%>\% sample_n(30) \%>\% tibble::column_to_rownames('sample')

#' # fix sample names for intersect between the two datatypes
rownames(definition_matrix) <- stringr::str_replace_all(rownames(definition_matrix), "-", ".")

# select intersect between definition matrix and count data
sample_list <- intersect(rownames(definition_matrix), colnames(count_data))

# select data and definition matrix as the intersect
count_data <- count_data[sample_list]
definition_matrix <- definition_matrix[sample_list,]

# select BRAF
columns <- c("BRAF") # if more column were provided in the definition_matrix

# set up parameters for CIBRA
control_definition <- "WT" # reference condition

confidence <- 0.1 # confidence threshold for the proportion calculation

# set permutation to 0 to skip permutations

iterations = 0 # number of permutation iterations to be performed per condition

# register(SnowParam(2)) # set number of cores to be used for parallel processing

# run CIBRA with default DE analysis method (DESeq2)

CIBRA_res <- run_CIBRA(count_data, as.data.frame(definition_matrix), columns = columns, control_definition = control_definition, confidence = confidence, iterations = iterations, parallel = FALSE) # set parallel to TRUE for parallel processing

# calculate the pvalue by comparing to a reference distribution generated with DESeq2
perm_data <- CIBRA::perm_dist_crc_tcga

# use the gamma test to also calculate a fitted p-value
CIBRA_res_stat <-  permutation_test(CIBRA_res$CIBRA_results, perm_data, test = "gamma")

}
